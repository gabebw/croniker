version: 2.1

commands:
  build_docker_image:
    parameters:
      tag:
        type: string
      cache_path:
        type: string
      arguments:
        type: string
        default: ""

    steps:
      - run:
          name: Set $DOCKER_CACHE_FOUND variable
          command: |
            if [[ -d ~/docker-cache ]]; then
              export DOCKER_CACHE_FOUND=true
            else
              export DOCKER_CACHE_FOUND=false
            fi
      - run:
          name: Show value of $DOCKER_CACHE_FOUND
          command:
            $DOCKER_CACHE_FOUND && echo "Found" || echo "Not found"
      - run:
          # The cache directory might not exist if:
          # 1) The Dockerfile changed, invalidating the cache, and thus the
          #    `restore_cache` didn't do anything
          # 2) This is the first time running a build with this cache, and thus
          #    there's no cache at all.
          # 3) Caches only last for 30 days, so a matching cache may expire,
          #    leading back to situation (2).
          name: Ensure Docker cache directory exists
          command: mkdir -p ~/docker-cache
      - run:
          name: Rehydrate Docker cache for << parameters.tag >>
          command: |
            if [[ -r ~/docker-cache/<< parameters.cache_path >> ]]; then
              docker load --input ~/docker-cache/<< parameters.cache_path >>
            else
              true
            fi
      - run:
          # Always load the cache of this tagged image (`--cache-from`)
          name: Build image for << parameters.tag >>
          command: |
            docker build \
              --cache-from << parameters.tag >> \
              --tag << parameters.tag >> \
              << parameters.arguments >> \
              .
      - run:
          name: Save new Docker cache for << parameters.tag >>
          command: |
            $DOCKER_CACHE_FOUND ||
              docker save \
                --output ~/docker-cache/<< parameters.cache_path >> \
                << parameters.tag >>

  push_to_heroku:
    parameters:
      environment:
        type: string
      tag:
        type: string

    steps:
      - run:
          name: Log in to Heroku Docker registry
          command: |
            docker login \
              --username=_ \
              --password="$HEROKU_API_KEY" \
              registry.heroku.com
      - run:
          name: Tag image for << parameters.environment >>
          command: |
            docker tag << parameters.tag >> \
              registry.heroku.com/croniker-<< parameters.environment >>/web
      - run:
          # Q: Why not use `heroku container:push`?
          # A: Because it builds the container from scratch, without the
          #    `--cache-from` speedup.
          name: Push image for << parameters.environment >>
          command: |
            docker push \
              registry.heroku.com/croniker-<< parameters.environment >>/web
      - run:
          name: Release container to Heroku << parameters.environment >>
          command: |
            heroku container:release web \
              --app croniker-<< parameters.environment >>
      - run:
          name: Set DEPLOYED_GIT_SHA environment variable for << parameters.environment >>
          command: |
            heroku config:set \
              DEPLOYED_GIT_SHA="$CIRCLE_SHA1" \
              --app croniker-<<parameters.environment >>

jobs:
  build:
    working_directory: ~/gabebw/croniker
    parallelism: 1
    shell: /bin/bash --login
    environment:
      GOOGLE_API_KEY: google_api_key
      LOG_LEVEL: debug
      TWITTER_CONSUMER_KEY: twitter_consumer_key
      TWITTER_CONSUMER_SECRET: twitter_consumer_secret

    docker:
    - image: fpco/stack-build:lts-13.0
    - image: circleci/postgres:10.6
      environment:
        POSTGRES_USER: croniker
        POSTGRES_DB: croniker_test
        POSTGRES_PASSWORD: ""

    steps:
    # The following `checkout` command checks out your code to your working
    # directory.
    - checkout
    # Restore the dependency cache
    - restore_cache:
        keys:
        # First entry gets preference; keys are used as a prefix so `v1-` would
        # match anything starting with `v1-`.
        - v2-stack-{{ checksum "stack.yaml" }}-{{ checksum "croniker.cabal" }}-{{ .Branch }}
        - v2-stack-{{ checksum "stack.yaml" }}-{{ checksum "croniker.cabal" }}-
    - run:
        name: Install dockerize
        command: |
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
        environment:
          DOCKERIZE_VERSION: v0.6.1
    - run:
        name: Show stack version
        command: stack --version
    - run: stack setup
    - run:
        name: Remove leftover stack files
        command: |
          rm -rf \
            "$(stack path --dist-dir)" \
            "$(stack path --local-install-root)"
    - run: stack install yesod-bin cabal-install
    - run:
        name: Build dependencies
        command: stack build --only-dependencies
    - run:
        name: Build tests
        command: stack build --test --no-run-tests

    - save_cache:
        key: v2-stack-{{ checksum "stack.yaml" }}-{{ checksum "croniker.cabal" }}-{{ .Branch }}
        paths:
        - ~/.stack
        - .stack-work

    - run:
        name: Wait for database
        command: dockerize -wait tcp://localhost:5432 -timeout 1m

    - run:
        name: Run tests
        command: stack test

  deploy:
    machine:
      # List of images:
      # https://circleci.com/docs/2.0/configuration-reference/#machine
      image: circleci/classic:latest
    steps:
      - checkout
      - run:
          name: Store Heroku credentials for Heroku command-line
          command: echo "machine api.heroku.com login gabebw@gabebw.com password $HEROKU_API_KEY" >> ~/.netrc
      - run:
          # Upgrade because `heroku container:release` isn't available in the
          # version of Heroku pre-installed by Circle.
          name: Update Heroku
          command: curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run:
          name: Show Heroku version
          command: heroku --version
      - run:
          name: Log in to Heroku Container Registry
          command: heroku container:login
      - restore_cache:
          keys:
            - v3-docker-{{ checksum "Dockerfile" }}-{{ .Branch }}
            - v3-docker-{{ checksum "Dockerfile" }}
      - build_docker_image:
          tag: croniker:fpco
          cache_path: fpco.tar
          arguments: --target fpco
      - build_docker_image:
          tag: croniker:final
          cache_path: final.tar
          arguments: --cache-from croniker:fpco
      - save_cache:
          key: v3-docker-{{ checksum "Dockerfile" }}-{{ .Branch }}
          paths:
            - ~/docker-cache
      - push_to_heroku:
          environment: staging
          tag: croniker:final
      - push_to_heroku:
          environment: production
          tag: croniker:final

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
